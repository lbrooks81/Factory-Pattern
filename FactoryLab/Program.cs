/*
* 
* DO NOT EDIT THIS FILE!!
* 
*/

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;

namespace FactoryLab
{
    public enum ProductType
    {
        Laptop,
        Smartphone,
        RoboticVacuum,
        Camera,
        AirFryer
    }

    public class Program
    {
        private static readonly int MAX_POINTS = 5;

        public static void Main()
        {
            float currentPoints = MAX_POINTS;

            String[] items = File.ReadAllLines("inputs.txt");
            int[] productTypeDistribution = new int[Enum.GetNames(typeof(ProductType)).Length];
            List<InventoryItem?> inventoryItems = [];

            foreach (String item in items)
            {
                String[] itemSplit = item.Split(",").Select(x => x.Trim()).ToArray();
                List<String> miscAttributes = itemSplit.Skip(5).ToList();
                inventoryItems.Add(InventoryItemFactory.Create((ProductType)int.Parse(itemSplit[0]), itemSplit[1], itemSplit[2], int.Parse(itemSplit[3]), float.Parse(itemSplit[4]), miscAttributes));
                productTypeDistribution[int.Parse(itemSplit[0])]++;
            }

            currentPoints -= CheckInventoryList(inventoryItems, productTypeDistribution, 5);

            currentPoints -= CheckProperties(1);

            Console.WriteLine("Checking display methods...");

            currentPoints -= CheckDisplays(1);

            foreach (InventoryItem? item in inventoryItems)
            {
                if (item == null)
                {
                    continue;
                }
                item.DisplayItem();
            }

            Finalize(currentPoints);
        }

        private static float CheckInventoryList(List<InventoryItem?> inventoryItems, int[] itemListDistribution, int maxPointsLost = 5)
        {
            float pointsLost = 0;

            foreach (InventoryItem? item in inventoryItems)
            {
                if (item == null)
                {
                    continue;
                }    
                else if (item.GetType() == typeof(Laptop))
                {
                    itemListDistribution[(int)ProductType.Laptop]--;
                }
                else if (item.GetType() == typeof(Smartphone))
                {
                    itemListDistribution[(int)ProductType.Smartphone]--;
                }
                else if (item.GetType() == typeof(RoboticVacuum))
                {
                    itemListDistribution[(int)ProductType.RoboticVacuum]--;
                }
                else if (item.GetType() == typeof(Camera))
                {
                    itemListDistribution[(int)ProductType.Camera]--;
                }
                else if (item.GetType() == typeof(AirFryer))
                {
                    itemListDistribution[(int)ProductType.AirFryer]--;
                }
            }

            foreach (int num in itemListDistribution)
            {
                if (num != 0)
                {
                    pointsLost += (float)itemListDistribution.Length / maxPointsLost;
                }
            }

            if (pointsLost > 0)
            {
                Console.Error.WriteLine("The types in the InventoryItems list are not all correct.");
            }

            return Math.Min(maxPointsLost, pointsLost);
        }


        private static int CheckProperties(int pointsLostForEach = 1)
        {
            int pointsLost = 0;

            if (typeof(Laptop).GetProperties().Length < 10)
            {
                Console.Error.WriteLine("Not enough properties for the laptop items!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(Smartphone).GetProperties().Length < 10)
            {
                Console.Error.WriteLine("Not enough properties for the smartphone items!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(RoboticVacuum).GetProperties().Length < 9)
            {
                Console.Error.WriteLine("Not enough properties for the robotic vacuum items!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(Camera).GetProperties().Length < 8)
            {
                Console.Error.WriteLine("Not enough properties for the camera items!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(AirFryer).GetProperties().Length < 8)
            {
                Console.Error.WriteLine("Not enough properties for the air fryer items!");
                pointsLost += pointsLostForEach;
            }

            return pointsLost;
        }

        private static int CheckDisplays(int pointsLostForEach = 1)
        {
            int pointsLost = 0;

            if (typeof(Laptop).GetMethod("DisplayItem")?.GetBaseDefinition().DeclaringType == typeof(Laptop).GetMethod("DisplayItem")?.DeclaringType)
            {
                Console.Error.WriteLine("Laptop display method has not been overridden!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(Smartphone).GetMethod("DisplayItem")?.GetBaseDefinition().DeclaringType == typeof(Smartphone).GetMethod("DisplayItem")?.DeclaringType)
            {
                Console.Error.WriteLine("Smartphone display method has not been overridden!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(RoboticVacuum).GetMethod("DisplayItem")?.GetBaseDefinition().DeclaringType == typeof(RoboticVacuum).GetMethod("DisplayItem")?.DeclaringType)
            {
                Console.Error.WriteLine("Robotic vacuum display method has not been overridden!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(Camera).GetMethod("DisplayItem")?.GetBaseDefinition().DeclaringType == typeof(Camera).GetMethod("DisplayItem")?.DeclaringType)
            {
                Console.Error.WriteLine("Camera display method has not been overridden!");
                pointsLost += pointsLostForEach;
            }

            if (typeof(AirFryer).GetMethod("DisplayItem")?.GetBaseDefinition().DeclaringType == typeof(AirFryer).GetMethod("DisplayItem")?.DeclaringType)
            {
                Console.Error.WriteLine("AirFryer display method has not been overridden!");
                pointsLost += pointsLostForEach;
            }

            return pointsLost;
        }

        private static void Finalize(float points)
        {
            points = Math.Max(points, 0);
            Console.WriteLine($"{Environment.NewLine}{points}/{MAX_POINTS} scored.");
            Console.WriteLine((points / MAX_POINTS * 100).ToString("0.0") + "%");

            try
            {
                Environment.Exit(0);
            }
            catch 
            {
                Console.Error.WriteLine("Error terminating the program. Any additional output is not part of the grading process.");
            }
        }
    }
}